{"version":3,"sources":["Input.js","ToDo.js","DeleteBtn.js","App.js","serviceWorker.js","index.js"],"names":["Input","react_default","a","createElement","htmlFor","name","placeholder","className","onKeyUp","this","props","onSubmit","Component","ToDo","_this$props","text","onClick","DeleteBtn","App","state","todos","_this","loadArray","onEnter","event","key","addInputToArray","target","value","newTodos","done","concat","Object","toConsumableArray","setState","updateArray","index","arr","slice","objectSpread","deleteTodoItem","_this2","save","Input_Input","renderToDos","_this3","map","todo","ToDo_ToDo","DeleteBtn_DeleteBtn","JSON","parse","localStorage","getItem","err","setItem","stringify","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5239b6e0.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Input.css'\n\nexport default class Input extends Component {\n  render() {\n    return (\n      <label htmlFor=\"input\">\n        What do you want to keep in mind?\n        <input\n          name=\"input\"\n          placeholder=\"Breathe and smile :)\"\n          className=\"Input\"\n          onKeyUp={this.props.onSubmit}\n        />\n      </label>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './ToDo.css'\n\nexport default class ToDo extends Component {\n  render() {\n    const { text, onClick, className } = this.props\n\n    return (\n      <li className={className} onClick={onClick}>\n        {text}\n      </li>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './DeleteBtn.css'\n\nexport default class DeleteBtn extends Component {\n  render() {\n    const { onClick } = this.props\n\n    return <button onClick={onClick}>&times;</button>\n  }\n}\n","import React, { Component } from 'react'\nimport './App.css'\nimport Input from './Input'\nimport ToDo from './ToDo'\nimport DeleteBtn from './DeleteBtn'\n\nexport default class App extends Component {\n  state = {\n    todos: this.loadArray()\n  }\n\n  render() {\n    this.save()\n    return (\n      <div className=\"App\">\n        <Input onSubmit={event => this.onEnter(event)} />\n        <ul className=\"listContainer\">{this.renderToDos()}</ul>\n      </div>\n    )\n  }\n\n  renderToDos() {\n    return this.state.todos.map((todo, index, arr) => (\n      <div key={`listItem${index}`} className=\"listItem\">\n        <ToDo\n          key={`todo${index}`}\n          text={todo.text}\n          className={this.state.todos[index].done ? 'ToDo done' : 'ToDo'}\n          onClick={() => this.updateArray(index, arr)}\n        />\n        <DeleteBtn\n          key={`btn${index}`}\n          onClick={() => {\n            this.deleteTodoItem(index, arr)\n            this.save()\n          }}\n        />\n      </div>\n    ))\n  }\n\n  onEnter = event => {\n    if (event.key === 'Enter') {\n      this.addInputToArray(event)\n      event.target.value = ''\n    }\n  }\n\n  addInputToArray = event => {\n    const newTodos = [\n      { text: event.target.value, done: false },\n      ...this.state.todos\n    ]\n    this.setState({ todos: newTodos })\n  }\n\n  updateArray = (index, arr) => {\n    this.setState({\n      todos: [\n        ...arr.slice(0, index),\n        { ...arr[index], done: !this.state.todos[index].done },\n        ...arr.slice(index + 1)\n      ]\n    })\n  }\n\n  deleteTodoItem = (index, arr) => {\n    this.setState({ todos: [...arr.slice(0, index), ...arr.slice(index + 1)] })\n  }\n\n  loadArray() {\n    try {\n      return JSON.parse(localStorage.getItem('to-do list')) || []\n    } catch (err) {\n      return []\n    }\n  }\n\n  save() {\n    localStorage.setItem('to-do list', JSON.stringify(this.state.todos))\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}