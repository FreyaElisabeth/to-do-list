{"version":3,"sources":["GlobalStyle.js","Input.js","ToDo.js","Separator.js","ProgressBar.js","colors.js","App.js","serviceWorker.js","index.js"],"names":["createGlobalStyle","_templateObject","InputField","styled","input","withConfig","displayName","componentId","Input","react_default","a","createElement","htmlFor","name","placeholder","className","onKeyUp","this","props","onSubmit","Component","Wrapper","div","Button","button","ToDo","_this$props","text","onToggle","onDelete","done","onClick","section","Line","thickness","Text","span","Separator","Separator_Wrapper","Progress","width","ProgressBar","ProgressBar_Wrapper","App","state","todos","_this","loadArray","onEnter","event","key","addInputToArray","target","value","renderSingleToDo","todo","ToDo_ToDo","id","updateArray","deleteTodoItem","setState","uid","concat","Object","toConsumableArray","index","findIndex","slice","objectSpread","_this2","save","App_Wrapper","Input_Input","ProgressBar_ProgressBar","determineProgress","Separator_Separator","renderOpenToDos","renderDoneToDos","filter","length","map","JSON","parse","localStorage","getItem","err","setItem","stringify","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","Fragment","App_App","GlobalStyle","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.81823ccb.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\n\nexport default createGlobalStyle`\nbody {\n  box-sizing: border-box;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  margin: 0;\n  padding: 0;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n}\n`\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nconst InputField = styled.input`\n  margin: 0.5em 0 1em 0;\n  font-size: 22px;\n  caret-color: #151d36;\n  color: #151d36;\n  width: 80vw;\n  border: none;\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 2px 2px #a6fde5;\n  }\n`\n\nexport default class Input extends Component {\n  render() {\n    return (\n      <label htmlFor=\"input\">\n        What do you want to keep in mind?\n        <InputField\n          name=\"input\"\n          placeholder=\"Breathe and smile :)\"\n          className=\"Input\"\n          onKeyUp={this.props.onSubmit}\n        />\n      </label>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 0.75em;\n  margin-bottom: 0.75em;\n\n  .done {\n    text-decoration: line-through;\n  }\n`\n\nconst Button = styled.button`\n  width: 1.2em;\n  height: 1.2em;\n  font-size: 22px;\n  border: none;\n  color: #151d36;\n  border-radius: 50%;\n  background: #a6fde5;\n  text-align: center;\n  vertical-align: center;\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 2px 2px #a6fde5;\n  }\n`\n\nexport default class ToDo extends Component {\n  render() {\n    const { text, onToggle, onDelete, done } = this.props\n\n    return (\n      <Wrapper>\n        <span className={done ? 'done' : ''} onClick={onToggle}>\n          {text}\n        </span>\n        <Button onClick={onDelete}>&times;</Button>\n      </Wrapper>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.section`\n  display: flex;\n  align-items: center;\n`\n\nconst Line = styled.div`\n  width: 100%;\n  margin: 0.75em 0;\n  border-bottom: ${props => props.thickness || 4}px solid #a6fde5;\n`\n\nconst Text = styled.span`\n  white-space: nowrap;\n  padding: 0 1em;\n`\n\nexport default class Separator extends Component {\n  render() {\n    return (\n      <Wrapper>\n        <Line thickness={1} />\n        <Text>{this.props.text}</Text>\n        <Line thickness={1} />\n      </Wrapper>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { turquoise } from './colors'\n\nconst Wrapper = styled.div`\n  border: 1px solid ${turquoise};\n  border-radius: 9px;\n`\nconst Progress = styled.div`\n  background: ${turquoise};\n  border-radius: 9px;\n  height: 18px;\n  width: ${props => props.width}%;\n`\n\nexport default class ProgressBar extends Component {\n  render() {\n    return (\n      <Wrapper>\n        <Progress width={this.props.width * 100} />\n      </Wrapper>\n    )\n  }\n}\n","export const turquoise = '#a6fde5'\nexport const darkblue = '#151d36'\n","import React, { Component } from 'react'\nimport uid from 'uid'\nimport styled from 'styled-components'\n\nimport Input from './Input'\nimport ToDo from './ToDo'\nimport Separator from './Separator'\nimport ProgressBar from './ProgressBar'\n\nconst Wrapper = styled.div`\n  background: #151d36;\n  color: #a6fde5;\n  font-size: 22px;\n  min-height: 100vh;\n  padding: 1em;\n`\n\nexport default class App extends Component {\n  state = {\n    todos: this.loadArray()\n  }\n\n  render() {\n    this.save()\n    return (\n      <Wrapper>\n        <Input onSubmit={event => this.onEnter(event)} />\n        <ProgressBar width={this.determineProgress()} />\n        <Separator text=\"to do\" />\n        {this.renderOpenToDos()}\n        <Separator text=\"done\" />\n        {this.renderDoneToDos()}\n      </Wrapper>\n    )\n  }\n\n  onEnter = event => {\n    if (event.key === 'Enter') {\n      this.addInputToArray(event)\n      event.target.value = ''\n    }\n  }\n\n  determineProgress() {\n    const { todos } = this.state\n    const result = todos.filter(todo => todo.done).length / todos.length\n    return result\n  }\n\n  renderOpenToDos() {\n    return this.state.todos\n      .filter(todo => !todo.done)\n      .map(this.renderSingleToDo)\n  }\n\n  renderDoneToDos() {\n    return this.state.todos.filter(todo => todo.done).map(this.renderSingleToDo)\n  }\n\n  renderSingleToDo = todo => {\n    return (\n      <ToDo\n        key={todo.id}\n        text={todo.text}\n        done={todo.done}\n        onToggle={() => this.updateArray(todo.id)}\n        onDelete={() => this.deleteTodoItem(todo.id)}\n      />\n    )\n  }\n\n  addInputToArray = event => {\n    this.setState({\n      todos: [\n        { text: event.target.value, done: false, id: uid() },\n        ...this.state.todos\n      ]\n    })\n  }\n\n  updateArray = id => {\n    const { todos } = this.state\n    const index = todos.findIndex(todo => todo.id === id)\n    const todo = todos[index]\n    this.setState({\n      todos: [\n        ...todos.slice(0, index),\n        { ...todo, done: !todo.done },\n        ...todos.slice(index + 1)\n      ]\n    })\n  }\n\n  deleteTodoItem = id => {\n    const { todos } = this.state\n    const index = todos.findIndex(todo => todo.id === id)\n    this.setState({\n      todos: [...todos.slice(0, index), ...todos.slice(index + 1)]\n    })\n  }\n\n  loadArray() {\n    try {\n      return JSON.parse(localStorage.getItem('to-do list')) || []\n    } catch (err) {\n      return []\n    }\n  }\n\n  save() {\n    localStorage.setItem('to-do list', JSON.stringify(this.state.todos))\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport GlobalStyle from './GlobalStyle'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n    <GlobalStyle />\n  </React.Fragment>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}