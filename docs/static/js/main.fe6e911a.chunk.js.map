{"version":3,"sources":["Input.js","ToDo.js","DeleteBtn.js","App.js","serviceWorker.js","index.js"],"names":["Input","react_default","a","createElement","htmlFor","type","name","placeholder","className","onKeyUp","this","props","onSubmit","Component","ToDo","_this$props","text","onClick","DeleteBtn","App","state","todos","_this","loadArray","onEnter","event","key","addInputToArray","target","value","newTodos","done","concat","Object","toConsumableArray","setState","updateArray","index","arr","slice","objectSpread","deleteTodoItem","localStorage","setItem","JSON","stringify","loadFromLocalStorage","parse","getItem","_this2","saveToLocalStorage","Input_Input","map","todo","ToDo_ToDo","DeleteBtn_DeleteBtn","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wUAGqBA,gMAEjB,OACEC,EAAAC,EAAAC,cAAA,SAAOC,QAAQ,SAAf,oCAEEH,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLC,KAAK,QACLC,YAAY,uBACZC,UAAU,QACVC,QAASC,KAAKC,MAAMC,mBAVKC,cCAdC,0LACV,IAAAC,EAC8BL,KAAKC,MAAlCK,EADDD,EACCC,KAAMC,EADPF,EACOE,QAAST,EADhBO,EACgBP,UAEvB,OACEP,EAAAC,EAAAC,cAAA,MAAIK,UAAWA,EAAWS,QAASA,GAChCD,UANyBH,cCAbK,0LACV,IACCD,EAAYP,KAAKC,MAAjBM,QAER,OAAOhB,EAAAC,EAAAC,cAAA,UAAQc,QAASA,GAAjB,eAJ4BJ,cCGlBM,6MACnBC,MAAQ,CACNC,MAAOC,EAAKC,eAGdC,QAAU,SAAAC,GACU,UAAdA,EAAMC,MACRJ,EAAKK,gBAAgBF,GACrBA,EAAMG,OAAOC,MAAQ,OAIzBF,gBAAkB,SAAAF,GAChB,IAAMK,EAAQ,CACZ,CAAEd,KAAMS,EAAMG,OAAOC,MAAOE,MAAM,IADtBC,OAAAC,OAAAC,EAAA,EAAAD,CAETX,EAAKF,MAAMC,QAEhBC,EAAKa,SAAS,CAAEd,MAAOS,OAGzBM,YAAc,SAACC,EAAOC,GACpB,IAAMR,EAAQG,OAAAC,EAAA,EAAAD,CACTK,EAAIC,MAAM,EAAGF,IADJL,OAAA,CAAAC,OAAAO,EAAA,EAAAP,CAAA,GAEPK,EAAID,GAFG,CAEKN,MAAOT,EAAKF,MAAMC,MAAMgB,GAAON,QAFpCE,OAAAC,EAAA,EAAAD,CAGTK,EAAIC,MAAMF,EAAQ,KAEvBf,EAAKa,SAAS,CAAEd,MAAOS,OAGzBW,eAAiB,SAACJ,EAAOC,GACvB,IAAMR,EAAQG,OAAAC,EAAA,EAAAD,CAAOK,EAAIC,MAAM,EAAGF,IAApBL,OAAAC,OAAAC,EAAA,EAAAD,CAA+BK,EAAIC,MAAMF,EAAQ,KAC/Df,EAAKa,SAAS,CAAEd,MAAOS,yFAIvBY,aAAaC,QAAQ,aAAcC,KAAKC,UAAUnC,KAAKU,MAAMC,4CAI7D,OAAOX,KAAKoC,wBAA0B,kDAItC,OAAOF,KAAKG,MAAML,aAAaM,QAAQ,gDAGhC,IAAAC,EAAAvC,KAGP,OAFAA,KAAKwC,qBAGHjD,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAACgD,EAAD,CAAOvC,SAAU,SAAAa,GAAK,OAAIwB,EAAKzB,QAAQC,MACvCxB,EAAAC,EAAAC,cAAA,MAAIK,UAAU,iBACXE,KAAKU,MAAMC,MAAM+B,IAAI,SAACC,EAAMhB,EAAOC,GAAd,OACpBrC,EAAAC,EAAAC,cAAA,OAAKuB,IAAG,WAAAM,OAAaK,GAAS7B,UAAU,YACtCP,EAAAC,EAAAC,cAACmD,EAAD,CACE5B,IAAG,OAAAM,OAASK,GACZrB,KAAMqC,EAAKrC,KACXR,UAAWyC,EAAK7B,MAAMC,MAAMgB,GAAON,KAAO,YAAc,OACxDd,QAAS,kBAAMgC,EAAKb,YAAYC,EAAOC,MAEzCrC,EAAAC,EAAAC,cAACoD,EAAD,CACE7B,IAAG,MAAAM,OAAQK,GACXpB,QAAS,WACPgC,EAAKR,eAAeJ,EAAOC,GAC3BW,EAAKC,oCAjEUrC,aCMb2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fe6e911a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Input.css'\n\nexport default class Input extends Component {\n  render() {\n    return (\n      <label htmlFor=\"input\">\n        What do you want to keep in mind?\n        <input\n          type=\"text\"\n          name=\"input\"\n          placeholder=\"Breathe and smile :)\"\n          className=\"Input\"\n          onKeyUp={this.props.onSubmit}\n        />\n      </label>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './ToDo.css'\n\nexport default class ToDo extends Component {\n  render() {\n    const { text, onClick, className } = this.props\n\n    return (\n      <li className={className} onClick={onClick}>\n        {text}\n      </li>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './DeleteBtn.css'\n\nexport default class DeleteBtn extends Component {\n  render() {\n    const { onClick } = this.props\n\n    return <button onClick={onClick}>&times;</button>\n  }\n}\n","import React, { Component } from 'react'\nimport './App.css'\nimport Input from './Input'\nimport ToDo from './ToDo'\nimport DeleteBtn from './DeleteBtn'\n\nexport default class App extends Component {\n  state = {\n    todos: this.loadArray()\n  }\n\n  onEnter = event => {\n    if (event.key === 'Enter') {\n      this.addInputToArray(event)\n      event.target.value = ''\n    }\n  }\n\n  addInputToArray = event => {\n    const newTodos = [\n      { text: event.target.value, done: false },\n      ...this.state.todos\n    ]\n    this.setState({ todos: newTodos })\n  }\n\n  updateArray = (index, arr) => {\n    const newTodos = [\n      ...arr.slice(0, index),\n      { ...arr[index], done: !this.state.todos[index].done },\n      ...arr.slice(index + 1)\n    ]\n    this.setState({ todos: newTodos })\n  }\n\n  deleteTodoItem = (index, arr) => {\n    const newTodos = [...arr.slice(0, index), ...arr.slice(index + 1)]\n    this.setState({ todos: newTodos })\n  }\n\n  saveToLocalStorage() {\n    localStorage.setItem('to-do list', JSON.stringify(this.state.todos))\n  }\n\n  loadArray() {\n    return this.loadFromLocalStorage() || []\n  }\n\n  loadFromLocalStorage() {\n    return JSON.parse(localStorage.getItem('to-do list'))\n  }\n\n  render() {\n    this.saveToLocalStorage()\n\n    return (\n      <div className=\"App\">\n        <Input onSubmit={event => this.onEnter(event)} />\n        <ul className=\"listContainer\">\n          {this.state.todos.map((todo, index, arr) => (\n            <div key={`listItem${index}`} className=\"listItem\">\n              <ToDo\n                key={`todo${index}`}\n                text={todo.text}\n                className={this.state.todos[index].done ? 'ToDo done' : 'ToDo'}\n                onClick={() => this.updateArray(index, arr)}\n              />\n              <DeleteBtn\n                key={`btn${index}`}\n                onClick={() => {\n                  this.deleteTodoItem(index, arr)\n                  this.saveToLocalStorage()\n                }}\n              />\n            </div>\n          ))}\n        </ul>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}